/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  7                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
scale   1;

#include "meshParameters"

geometry
{
    cylinder1
    {
        type   cylinder;
        point1 ($o1x $o1y -100);
        point2 ($o1x $o1y  100);
        radius $r;
    }

    cylinder2
    {
        type   cylinder;
        point1 ($o2x $o2y -100);
        point2 ($o2x $o2y  100);
        radius $r;
    }

    frontPlane1
    {
        type    plate;
        origin  ($po1x $po1y 0.5);
        span    ($p1span $p1span 0);
    }

    backPlane1
    {
        type    plate;
        origin  ($po1x $po1y -0.5);
        span    ($p1span $p1span 0);
    }

    frontPlane2
    {
        type    plate;
        origin  ($po2x $po2y 0.5);
        span    ($p2span $p2span 0);
    }

    backPlane2
    {
        type    plate;
        origin  ($po2x $po2y -0.5);
        span    ($p2span $p2span 0);
    }
}

vertices
(
    ( $x1inl  $y1inl  -0.5)
    ($x1outl  $y1outl -0.5)
    ($x1outu  $y1outu -0.5)
    ( $x1inu  $y1inu  -0.5)
    ( $x1inl  $y1inl   0.5)
    ($x1outl  $y1outl  0.5)
    ($x1outu  $y1outu  0.5)
    ( $x1inu  $y1inu   0.5)

    ( $x2inl  $y2inl  -0.5)
    ($x2outl  $y2outl -0.5)
    ($x2outu  $y2outu -0.5)
    ( $x2inu  $y2inu  -0.5)
    ( $x2inl  $y2inl   0.5)
    ($x2outl  $y2outl  0.5)
    ($x2outu  $y2outu  0.5)
    ( $x2inu  $y2inu   0.5)

    project ( $x3inl  $y3inl  -0.5) (cylinder1 backPlane1)
    project ($x3outl  $y3outl -0.5) (cylinder1 backPlane1)
    project ($x3outu  $y3outu -0.5) (cylinder2 backPlane2)
    project ( $x3inu  $y3inu  -0.5) (cylinder2 backPlane2)
    project ( $x3inl  $y3inl   0.5) (cylinder1 frontPlane1)
    project ($x3outl  $y3outl  0.5) (cylinder1 frontPlane1)
    project ($x3outu  $y3outu  0.5) (cylinder2 frontPlane2)
    project ( $x3inu  $y3inu   0.5) (cylinder2 frontPlane2)

    /*( $x3inl  $y3inl  -0.5)
    ($x3outl  $y3outl -0.5)
    ($x3outu  $y3outu -0.5)
    ( $x3inu  $y3inu  -0.5)
    ( $x3inl  $y3inl   0.5)
    ($x3outl  $y3outl  0.5)
    ($x3outu  $y3outu  0.5)
    ( $x3inu  $y3inu   0.5)*/
);

blocks
(
    //hex (0 1 2 3 4 5 6 7) ($hm1 $vm1 1) simpleGrading (1 1 1)
    //hex (8 9 10 11 12 13 14 15) ($hm2 $vm2 1) simpleGrading (1 1 1)
    hex (16 17 18 19 20 21 22 23) ($hm3 $vm3 1) simpleGrading (1 1 1)
);

edges
(
    project 16 17 (cylinder1 backPlane1)
    project 18 19 (cylinder2 backPlane2)
    project 20 21 (cylinder1 frontPlane1)
    project 22 23 (cylinder2 frontPlane2)

    project 16 20 (cylinder1)
    project 18 22 (cylinder2)
    project 17 21 (cylinder1)
    project 19 23 (cylinder2)
);

boundary
(
    wall
    {
        type wall;
        faces
        (
            (17 21 20 16)
            (19 23 22 18)
        );
    }

    in
    {
        type inlet;
        faces
        (
            (19 23 20 16)
        );
    }
    out
    {
        type outlet;
        faces
        (
            (18 22 21 17)
        );
    }

    front
    {
        type empty;
        faces
        (
            (20 21 22 23)
        );
    }

    back
    {
        type empty;
        faces
        (
            (16 19 18 17)
        );
    }
);

mergePatchPairs
(
//(interface1 interface2)
//(interface3 interface4)
);

// ************************************************************************* //
